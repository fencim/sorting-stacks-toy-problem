/* tslint:disable */
/* eslint-disable */
/**
 * Sorting Stack API
 * REST API for Sorting Stacks Game
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreatePlayerDto
 */
export interface CreatePlayerDto {
    /**
     * 
     * @type {string}
     * @memberof CreatePlayerDto
     */
    name: string;
}
/**
 * 
 * @export
 * @interface GameDto
 */
export interface GameDto {
    /**
     * 
     * @type {number}
     * @memberof GameDto
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof GameDto
     */
    level: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof GameDto
     */
    players: Array<string>;
}
/**
 * 
 * @export
 * @interface NewGameDto
 */
export interface NewGameDto {
    /**
     * 
     * @type {number}
     * @memberof NewGameDto
     */
    level: number;
    /**
     * 
     * @type {Array<PlayerDto>}
     * @memberof NewGameDto
     */
    players: Array<PlayerDto>;
    /**
     * 
     * @type {Array<string>}
     * @memberof NewGameDto
     */
    stacks: Array<string>;
}
/**
 * 
 * @export
 * @interface PlayerDto
 */
export interface PlayerDto {
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    name: string;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerDto
     */
    solved: boolean;
    /**
     * 
     * @type {number}
     * @memberof PlayerDto
     */
    totalSteps: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerDto
     */
    dateSolved?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        about: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/about`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Leader Board (top 100)
         * @param {number} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameLeaderBoard: async (gameId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('gameLeaderBoard', 'gameId', gameId)
            const localVarPath = `/game/{gameId}/player`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get information of game with id {id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getGame', 'id', id)
            const localVarPath = `/game/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all stacks in specified game
         * @param {number} gameid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStacks: async (gameid: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameid' is not null or undefined
            assertParamExists('getGameStacks', 'gameid', gameid)
            const localVarPath = `/game/{gameid}/stack`
                .replace(`{${"gameid"}}`, encodeURIComponent(String(gameid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get status of Player
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerStatus: async (gameId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('getPlayerStatus', 'gameId', gameId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getPlayerStatus', 'id', id)
            const localVarPath = `/game/{gameId}/player/{id}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Join Game
         * @param {number} gameId 
         * @param {CreatePlayerDto} createPlayerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGame: async (gameId: number, createPlayerDto: CreatePlayerDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('joinGame', 'gameId', gameId)
            // verify required parameter 'createPlayerDto' is not null or undefined
            assertParamExists('joinGame', 'createPlayerDto', createPlayerDto)
            const localVarPath = `/game/{gameId}/player`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createPlayerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary leave the game
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGame: async (gameId: number, id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('leaveGame', 'gameId', gameId)
            // verify required parameter 'id' is not null or undefined
            assertParamExists('leaveGame', 'id', id)
            const localVarPath = `/game/{gameId}/player/{id}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)))
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all running games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGames: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new Game
         * @param {NewGameDto} newGameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newGame: async (newGameDto: NewGameDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'newGameDto' is not null or undefined
            assertParamExists('newGame', 'newGameDto', newGameDto)
            const localVarPath = `/game`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newGameDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update status of player
         * @param {number} gameId 
         * @param {PlayerDto} playerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer: async (gameId: number, playerDto: PlayerDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('updatePlayer', 'gameId', gameId)
            // verify required parameter 'playerDto' is not null or undefined
            assertParamExists('updatePlayer', 'playerDto', playerDto)
            const localVarPath = `/game/{gameId}/player`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(playerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async about(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.about(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Leader Board (top 100)
         * @param {number} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async gameLeaderBoard(gameId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.gameLeaderBoard(gameId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get information of game with id {id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGame(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all stacks in specified game
         * @param {number} gameid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameStacks(gameid: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Array<number>>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getGameStacks(gameid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get status of Player
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPlayerStatus(gameId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPlayerStatus(gameId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Join Game
         * @param {number} gameId 
         * @param {CreatePlayerDto} createPlayerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async joinGame(gameId: number, createPlayerDto: CreatePlayerDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.joinGame(gameId, createPlayerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary leave the game
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async leaveGame(gameId: number, id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.leaveGame(gameId, id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all running games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listGames(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listGames(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create new Game
         * @param {NewGameDto} newGameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async newGame(newGameDto: NewGameDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.newGame(newGameDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary update status of player
         * @param {number} gameId 
         * @param {PlayerDto} playerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePlayer(gameId: number, playerDto: PlayerDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePlayer(gameId, playerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary About this REST API
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        about(options?: any): AxiosPromise<void> {
            return localVarFp.about(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Leader Board (top 100)
         * @param {number} gameId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        gameLeaderBoard(gameId: number, options?: any): AxiosPromise<void> {
            return localVarFp.gameLeaderBoard(gameId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get information of game with id {id}
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(id: number, options?: any): AxiosPromise<GameDto> {
            return localVarFp.getGame(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all stacks in specified game
         * @param {number} gameid 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameStacks(gameid: number, options?: any): AxiosPromise<Array<Array<number>>> {
            return localVarFp.getGameStacks(gameid, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get status of Player
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPlayerStatus(gameId: number, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.getPlayerStatus(gameId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Join Game
         * @param {number} gameId 
         * @param {CreatePlayerDto} createPlayerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        joinGame(gameId: number, createPlayerDto: CreatePlayerDto, options?: any): AxiosPromise<void> {
            return localVarFp.joinGame(gameId, createPlayerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary leave the game
         * @param {number} gameId 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        leaveGame(gameId: number, id: number, options?: any): AxiosPromise<void> {
            return localVarFp.leaveGame(gameId, id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all running games
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listGames(options?: any): AxiosPromise<void> {
            return localVarFp.listGames(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new Game
         * @param {NewGameDto} newGameDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        newGame(newGameDto: NewGameDto, options?: any): AxiosPromise<GameDto> {
            return localVarFp.newGame(newGameDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update status of player
         * @param {number} gameId 
         * @param {PlayerDto} playerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePlayer(gameId: number, playerDto: PlayerDto, options?: any): AxiosPromise<void> {
            return localVarFp.updatePlayer(gameId, playerDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary About this REST API
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public about(options?: any) {
        return DefaultApiFp(this.configuration).about(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Leader Board (top 100)
     * @param {number} gameId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public gameLeaderBoard(gameId: number, options?: any) {
        return DefaultApiFp(this.configuration).gameLeaderBoard(gameId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get information of game with id {id}
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGame(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getGame(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all stacks in specified game
     * @param {number} gameid 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getGameStacks(gameid: number, options?: any) {
        return DefaultApiFp(this.configuration).getGameStacks(gameid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get status of Player
     * @param {number} gameId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPlayerStatus(gameId: number, id: number, options?: any) {
        return DefaultApiFp(this.configuration).getPlayerStatus(gameId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Join Game
     * @param {number} gameId 
     * @param {CreatePlayerDto} createPlayerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public joinGame(gameId: number, createPlayerDto: CreatePlayerDto, options?: any) {
        return DefaultApiFp(this.configuration).joinGame(gameId, createPlayerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary leave the game
     * @param {number} gameId 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public leaveGame(gameId: number, id: number, options?: any) {
        return DefaultApiFp(this.configuration).leaveGame(gameId, id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all running games
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listGames(options?: any) {
        return DefaultApiFp(this.configuration).listGames(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new Game
     * @param {NewGameDto} newGameDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public newGame(newGameDto: NewGameDto, options?: any) {
        return DefaultApiFp(this.configuration).newGame(newGameDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update status of player
     * @param {number} gameId 
     * @param {PlayerDto} playerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePlayer(gameId: number, playerDto: PlayerDto, options?: any) {
        return DefaultApiFp(this.configuration).updatePlayer(gameId, playerDto, options).then((request) => request(this.axios, this.basePath));
    }
}


